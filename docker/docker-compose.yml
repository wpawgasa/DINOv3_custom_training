# Docker Compose for DINOv3 deployment
version: '3.8'

services:
  # Main API service
  dinov3-api:
    build:
      context: ..
      dockerfile: docker/Dockerfile.deploy
      target: production
    container_name: dinov3-api
    ports:
      - "8000:8000"
    environment:
      - MODEL_PATH=/app/models/model.pth
      - CONFIG_PATH=/app/configs/production.yaml
      - DEVICE=auto
      - LOG_LEVEL=info
      - WORKERS=4
      - WEB_CONCURRENCY=4
    volumes:
      - ../models:/home/dinov3/models:ro
      - ../configs:/home/dinov3/configs:ro
      - api-logs:/home/dinov3/logs
      - api-temp:/home/dinov3/temp
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - dinov3-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: dinov3-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - dinov3-api
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - dinov3-network

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: dinov3-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - dinov3-network

  # Grafana dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: dinov3-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - dinov3-network

  # Redis cache (optional)
  redis:
    image: redis:alpine
    container_name: dinov3-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - dinov3-network

volumes:
  api-logs:
  api-temp:
  nginx-logs:
  prometheus-data:
  grafana-data:
  redis-data:

networks:
  dinov3-network:
    driver: bridge