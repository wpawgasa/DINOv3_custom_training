# Multi-stage production Dockerfile for DINOv3 deployment
# Optimized for security, size, and performance

#############################################
# Stage 1: Base dependencies
#############################################
FROM nvidia/cuda:12.1-devel-ubuntu22.04 AS base

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies
RUN apt-get update && apt-get install -y \
    python3.10 \
    python3.10-dev \
    python3.10-distutils \
    python3-pip \
    build-essential \
    cmake \
    git \
    curl \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    libv4l-dev \
    libxvidcore-dev \
    libx264-dev \
    libgstreamer-plugins-base1.0-dev \
    libgstreamer1.0-dev \
    libgtk-3-dev \
    libqtgui4 \
    libqtwebkit4 \
    libqt4-test \
    pkg-config \
    libhdf5-dev \
    && rm -rf /var/lib/apt/lists/*

# Install uv for fast package management
RUN pip3 install uv

# Create non-root user for security
RUN useradd --create-home --shell /bin/bash dinov3
WORKDIR /home/dinov3

#############################################
# Stage 2: Python dependencies
#############################################
FROM base AS dependencies

# Copy requirements
COPY requirements.txt requirements-deploy.txt ./

# Install Python dependencies with uv
RUN uv pip install --system --no-cache -r requirements.txt
RUN uv pip install --system --no-cache -r requirements-deploy.txt

# Install additional production dependencies
RUN uv pip install --system --no-cache \
    uvicorn[standard] \
    gunicorn \
    prometheus-fastapi-instrumentator \
    prometheus-client

#############################################
# Stage 3: Model and application
#############################################
FROM dependencies AS application

# Copy source code
COPY --chown=dinov3:dinov3 src/ ./src/
COPY --chown=dinov3:dinov3 configs/ ./configs/

# Create directories
RUN mkdir -p models logs temp && \
    chown -R dinov3:dinov3 models logs temp

# Switch to non-root user
USER dinov3

# Add src to Python path
ENV PYTHONPATH=/home/dinov3/src:$PYTHONPATH

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Default command
CMD ["python3", "-m", "uvicorn", "src.api.server:app", "--host", "0.0.0.0", "--port", "8000"]

#############################################
# Stage 4: Production (default)
#############################################
FROM application AS production

# Production optimizations
ENV WORKERS=4
ENV LOG_LEVEL=info
ENV WEB_CONCURRENCY=4

# Use gunicorn for production
CMD ["gunicorn", "src.api.server:app", \
     "-k", "uvicorn.workers.UvicornWorker", \
     "--bind", "0.0.0.0:8000", \
     "--workers", "4", \
     "--worker-connections", "1000", \
     "--max-requests", "1000", \
     "--max-requests-jitter", "100", \
     "--timeout", "120", \
     "--keep-alive", "5", \
     "--log-level", "info", \
     "--access-logfile", "-", \
     "--error-logfile", "-"]

#############################################
# Stage 5: Development (optional)
#############################################
FROM application AS development

USER root

# Install development tools
RUN uv pip install --system --no-cache \
    pytest \
    pytest-asyncio \
    pytest-cov \
    black \
    isort \
    flake8 \
    mypy \
    jupyter \
    ipython

# Install debugging tools
RUN uv pip install --system --no-cache \
    ipdb \
    memory-profiler \
    py-spy

USER dinov3

# Development command with auto-reload
CMD ["python3", "-m", "uvicorn", "src.api.server:app", \
     "--host", "0.0.0.0", "--port", "8000", "--reload"]

#############################################
# Stage 6: Optimized (minimal production)
#############################################
FROM nvidia/cuda:12.1-runtime-ubuntu22.04 AS optimized

# Minimal system dependencies
RUN apt-get update && apt-get install -y \
    python3.10 \
    python3-distutils \
    python3-pip \
    curl \
    libjpeg8 \
    libpng16-16 \
    libtiff5 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create user
RUN useradd --create-home --shell /bin/bash dinov3
WORKDIR /home/dinov3

# Copy only necessary files from previous stages
COPY --from=dependencies /usr/local/lib/python3.10/dist-packages /usr/local/lib/python3.10/dist-packages
COPY --from=application --chown=dinov3:dinov3 /home/dinov3/src ./src/
COPY --from=application --chown=dinov3:dinov3 /home/dinov3/configs ./configs/

# Create directories
RUN mkdir -p models logs temp && \
    chown -R dinov3:dinov3 models logs temp

USER dinov3

# Set environment
ENV PYTHONPATH=/home/dinov3/src:$PYTHONPATH
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Production command
CMD ["python3", "-m", "gunicorn", "src.api.server:app", \
     "-k", "uvicorn.workers.UvicornWorker", \
     "--bind", "0.0.0.0:8000", \
     "--workers", "2", \
     "--timeout", "120"]
